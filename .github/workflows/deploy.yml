name: Deploy Echo Web Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Manual trigger

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  APP_VERSION: 1.0.0

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Go application
        run: |
          go mod tidy
          go build -o app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/echo-webapp:${{ github.sha }},${{ env.DOCKER_HUB_USERNAME }}/echo-webapp:latest
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/echo-webapp:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/echo-webapp:buildcache,mode=max

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubernetes
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Deploy to Kubernetes
        run: |
          # Update deployment image
          kubectl set image deployment/echo-webapp echo-webapp=${{ env.DOCKER_HUB_USERNAME }}/echo-webapp:${{ github.sha }} --record
          
          # Wait for deployment to complete
          kubectl rollout status deployment/echo-webapp

      - name: Database Migration
        run: |
          # Install mysql client
          apt-get update && apt-get install -y mysql-client
          
          # Run database migrations
          # This is a placeholder - replace with your actual migration command
          echo "Running database migrations..."
          # Example: mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME < migrations/schema.sql

      - name: Health Check
        run: |
          # Wait for service to be available
          sleep 30
          
          # Get service endpoint
          SERVICE_IP=$(kubectl get svc echo-webapp -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Check health endpoint
          curl -f http://$SERVICE_IP/health || {
            echo "Health check failed. Rolling back deployment..."
            kubectl rollout undo deployment/echo-webapp
            exit 1
          }
          
          echo "Deployment successful and health check passed!"

  rollback-on-failure:
    needs: build-and-deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Configure Kubernetes
        run: |
          echo "$KUBE_CONFIG_DATA" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Rollback Deployment
        run: |
          echo "Deployment failed. Rolling back..."
          kubectl rollout undo deployment/echo-webapp
          echo "Rollback completed."